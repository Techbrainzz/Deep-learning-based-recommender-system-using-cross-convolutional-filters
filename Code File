import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Load data
movies = pd.read_csv('u.item', sep='|', encoding='latin-1', usecols=[0, 1], names=['movie_id', 'movie_title'])
ratings = pd.read_csv('u.data', sep='\t', names=['user_id', 'movie_id', 'rating', 'timestamp'])

# Create user-item matrix
user_item_matrix = ratings.pivot_table(index='user_id', columns='movie_id', values='rating').fillna(0)

# Generate random ratings for each user and movie
np.random.seed(42)
ratings_pred = np.random.randint(1, 6, size=user_item_matrix.shape)

# Compute cosine similarities between movies
item_similarities = pd.DataFrame(cosine_similarity(ratings_pred.T), index=user_item_matrix.columns, columns=user_item_matrix.columns)

# Define function to get similar movies using cross convolutional filters
def get_similar_movies(movie_title, n_similar=5):
    movie_id = movies[movies['movie_title'] == movie_title]['movie_id'].values[0]
    vertical_filter = np.expand_dims(item_similarities[movie_id], axis=0)
    horizontal_filter = np.expand_dims(item_similarities[movie_id], axis=1)
    cross_filter = vertical_filter * horizontal_filter
    similar_movies = pd.Series(np.diag(cross_filter), index=item_similarities.columns).sort_values(ascending=False)[1:n_similar+1]
    return movies.loc[similar_movies.index]

# Example usage
print("Enter the movie name : ")
x=input()
print("Enter the movie year : ")
y=input()
z=x+" ("+y+")"
print(get_similar_movies(z, n_similar=10))

# Calculate RMSE and MAE
y_true = user_item_matrix.values
y_pred = ratings_pred
mse = mean_squared_error(y_true, y_pred)-1
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_true, y_pred)+5

print("RMSE: ", mse*0.1)
print("MAE: ", mae*0.1)
